// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Admin.Client.Pages.Backend.PastPapers
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using System.Net.Http

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using System.Net.Http.Json

#nullable disable
    ;
#nullable restore
#line 3 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization

#nullable disable
    ;
#nullable restore
#line 4 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms

#nullable disable
    ;
#nullable restore
#line 5 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing

#nullable disable
    ;
#nullable restore
#line 6 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web

#nullable disable
    ;
#nullable restore
#line 7 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization

#nullable disable
    ;
#nullable restore
#line 8 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http

#nullable disable
    ;
#nullable restore
#line 9 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using Microsoft.JSInterop

#nullable disable
    ;
#nullable restore
#line 10 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using Admin.Client

#nullable disable
    ;
#nullable restore
#line 11 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\_Imports.razor"
using Admin.Client.Shared

#nullable disable
    ;
#nullable restore
#line 1 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
 using Admin.Shared.Models

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
 using Microsoft.AspNetCore.Authorization

#nullable disable
    ;
#nullable restore
#line 3 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
 using Microsoft.AspNetCore.Components.WebAssembly.Authentication

#nullable disable
    ;
#nullable restore
#line 4 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
 using Microsoft.Extensions.Logging

#nullable disable
    ;
#nullable restore
#line 6 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
 using Admin.Shared.Dtos

#nullable disable
    ;
#nullable restore
#line 7 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
 using System.IO

#nullable disable
    ;
#nullable restore
#line 10 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
 using Newtonsoft.Json

#line default
#line hidden
#nullable disable
    ;
    #nullable restore
    public partial class MCQForm : global::Microsoft.AspNetCore.Components.ComponentBase
    #nullable disable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 407 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
       

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool isToBeEdited { get; set; }

    [Parameter] public PastPaper PastPaperModel { get; set; }
    [Parameter] public List<mcqdto> mcqs { get; set; }

    public List<McqPastPaperFormDto> Examinations { get; set; } = new List<McqPastPaperFormDto>();
    public List<McqSubjectFormDto> Subjects { get; set; } = new List<McqSubjectFormDto>();


    public string ExamTitle { get; set; } = string.Empty;

    public string examId { get; set; } = "0";
    private int subjectId { get; set; } = 0;
    public bool isLoading { get; set; }

    private long DownloadSize;


    [Parameter]
    public EventCallback<PastPaper> OnPastPaperFormEditSubmit { get; set; }

    private static Random random = new Random();
    private string quizCode = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            Examinations = await Http.GetFromJsonAsync<List<McqPastPaperFormDto>>("api/ExamSubjects");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        isLoading = false;

    }

    private void OnChangeExamination(ChangeEventArgs e)
    {

        LoadSubjects(e.Value.ToString());

    }


    public async Task HandleValidSubmit()
    {
        PastPaperModel.Id = PastPaperModel.SetId();

        //Initialize the MCQ collection list
        SetMCQs();

        if (!isToBeEdited)
        {
            PastPaperModel.DownloadSize = DownloadSize;
        }
        else
        {
            PastPaperModel.DownloadSize = PastPaperModel.CorrectAnswerCount;
        }
        PastPaperModel.Quantity = mcqs.Count;
        PastPaperModel.CorrectAnswerCount = 0;


        await OnPastPaperFormEditSubmit.InvokeAsync(PastPaperModel);
    }

    public void SubjectHasChanged(int subjId)
    {
        PastPaperModel.SubjectID = subjId;

        //Set pastPaperId
        if (isToBeEdited)
        {
            PastPaperModel.Id = PastPaperModel.SetId();
        }
    }

    private void LoadSubjects(string examId)
    {
        Subjects = new List<McqSubjectFormDto>();

        foreach (var exam in Examinations)
        {
            if (exam.ExamId == examId)
            {
                Subjects = exam.McqSubjects;
                return;
            }
        }
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {

        var file = e.File;

        // Check if the file is null then return from the method
        if (file == null)
            return;

        DownloadSize =  file.Size /1024; //Download size in Kilobytes

        string jsonFromFile;
        using (var reader = new StreamReader(file.OpenReadStream(file.Size + 10000)))
        {
            jsonFromFile = await reader.ReadToEndAsync();
        }

        try
        {
            mcqs = JsonConvert.DeserializeObject<List<mcqdto>>(jsonFromFile);
        }catch(Exception ex)
        {
            Console.WriteLine("Deserialization failed", ex.Message);
        }

    }

    private void SetMCQs()
    {
        var questions = new List<MCQ>();
        foreach(var mcq in mcqs)
        {
            //1. set regular properties
            var mCQ = new MCQ()
            {
                Question = mcq.Question,
                QuestionImageUrl = mcq.QuestionImageUrl,
                Answer = mcq.Answer,
                MultipleAnswers = mcq.MultipleAnswers,
                IsAnonymous = mcq.IsAnonymous,
                correctAnswer = mcq.correctAnswer,
                JustificationText = mcq.JustificationText,
                JustificationImageUrl = mcq.JustificationImageUrl,
                Instruction = mcq.Instruction,
                TopicId = mcq.TopicId,
                Position = mcq.Position,
                PastPaperId = PastPaperModel.Id,
                SubjectId = PastPaperModel.SubjectID,
                VideoUrl = mcq.VideoUrl
            };

            //2. Set options for this question if any
            if (mcq.Options.Any())
            {
                var options = new List<Option>();
                foreach(var opt in mcq.Options)
                {
                    var option = new Option()
                    {
                        mcqOption = opt
                    };
                    options.Add(option);
                }

                //Attach a list of options
                mCQ.Options = options;
            }
            else
            //2. Set Image Options for this question if any
            if (mcq.OptionImageUrl.Any())
            {
                var options = new List<OptionImage>();
                foreach (var op in mcq.OptionImageUrl)
                {
                    var option = new OptionImage()
                    {
                        OptionImgUrl = op
                    };
                    options.Add(option);
                }

                //Attach a list of options
                mCQ.OptionImageUrl = options;
            }

            //3. Map a collection of answers
            if (mcq.Answers.Any())
            {
                var answers = new List<Answer>();

                foreach(var ans in mcq.Answers)
                {
                    answers.Add(new Answer()
                    {
                        Ans = ans
                    });
                }

                mCQ.Answers = answers;
            }

            questions.Add(mCQ);
        }

        PastPaperModel.Questions = questions;
        PastPaperModel.Quantity = mcqs.Count;
    }

    private async void OnQuizSelectedAction()
    {
        if (!PastPaperModel.IsQuiz)
        {
            PastPaperModel.IsQuiz = true;
            const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789";
            var code = new string(Enumerable.Repeat(chars, 8)
              .Select(s => s[random.Next(s.Length)]).ToArray());

            //var code = Convert.ToBase64String(Guid.NewGuid().ToByteArray()).Substring(0, 8);
            quizCode = code;

            PastPaperModel.QuizPassCode = code;

            await JSRuntime.InvokeAsync<bool>("confirm", $" Length of striing: {code}");
        }
        else
        {
            PastPaperModel.IsQuiz = false;


        }

    }


#line default
#line hidden
#nullable disable

        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 15 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
        ILogger<MCQForm>

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 15 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
                         Logger

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 13 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
        IJSRuntime

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 13 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
                   JSRuntime

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 12 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
        HttpClient

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 12 "C:\Users\HUNTER DERICK\Desktop\Admin\Client\Pages\Backend\PastPapers\MCQForm.razor"
                   Http

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
    }
}
#pragma warning restore 1591
