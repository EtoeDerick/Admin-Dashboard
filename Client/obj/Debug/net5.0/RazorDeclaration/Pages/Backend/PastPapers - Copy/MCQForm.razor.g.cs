// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Admin.Client.Pages.Backend.PastPapers___Copy
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "G:\Admin\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\Admin\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "G:\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "G:\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "G:\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "G:\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "G:\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "G:\Admin\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "G:\Admin\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "G:\Admin\Client\_Imports.razor"
using Admin.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "G:\Admin\Client\_Imports.razor"
using Admin.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "G:\Admin\Client\Pages\Backend\PastPapers - Copy\MCQForm.razor"
using Admin.Shared.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\Admin\Client\Pages\Backend\PastPapers - Copy\MCQForm.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "G:\Admin\Client\Pages\Backend\PastPapers - Copy\MCQForm.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "G:\Admin\Client\Pages\Backend\PastPapers - Copy\MCQForm.razor"
using Microsoft.Extensions.Logging;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "G:\Admin\Client\Pages\Backend\PastPapers - Copy\MCQForm.razor"
using Admin.Shared.Dtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "G:\Admin\Client\Pages\Backend\PastPapers - Copy\MCQForm.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "G:\Admin\Client\Pages\Backend\PastPapers - Copy\MCQForm.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
    public partial class MCQForm : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 267 "G:\Admin\Client\Pages\Backend\PastPapers - Copy\MCQForm.razor"
       

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool isToBeEdited { get; set; }

    [Parameter] public PastPaper PastPaperModel { get; set; }
    [Parameter] public List<mcqdto> mcqs { get; set; }

    public List<McqPastPaperFormDto> Examinations { get; set; } = new List<McqPastPaperFormDto>();
    public List<McqSubjectFormDto> Subjects { get; set; } = new List<McqSubjectFormDto>();


    public string ExamTitle { get; set; } = string.Empty;

    public string examId { get; set; } = "0";
    private int subjectId { get; set; } = 0;
    public bool isLoading { get; set; }


    [Parameter]
    public EventCallback<PastPaper> OnPastPaperFormEditSubmit { get; set; }


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            Examinations = await Http.GetFromJsonAsync<List<McqPastPaperFormDto>>("api/ExamSubjects");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        isLoading = false;

    }

    private void OnChangeExamination(ChangeEventArgs e)
    {

        LoadSubjects(e.Value.ToString());

    }


    public async Task HandleValidSubmit()
    {
        PastPaperModel.Id = PastPaperModel.SetId();

        //Initialize the MCQ collection list
        SetMCQs();

        await OnPastPaperFormEditSubmit.InvokeAsync(PastPaperModel);
    }

    public void SubjectHasChanged(int subjId)
    {
        PastPaperModel.SubjectID = subjId;

        //Set pastPaperId
        if (isToBeEdited)
        {
            PastPaperModel.Id = PastPaperModel.SetId();
        }
    }

    private void LoadSubjects(string examId)
    {
        Subjects = new List<McqSubjectFormDto>();

        foreach (var exam in Examinations)
        {
            if (exam.ExamId == examId)
            {
                Subjects = exam.McqSubjects;
                return;
            }
        }
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {

        var file = e.File;

        // Check if the file is null then return from the method
        if (file == null)
            return;

        string jsonFromFile;
        using (var reader = new StreamReader(file.OpenReadStream(file.Size + 10000)))
        {
            jsonFromFile = await reader.ReadToEndAsync();
        }

        try
        {
            mcqs = JsonConvert.DeserializeObject<List<mcqdto>>(jsonFromFile);
        }catch(Exception ex)
        {
            Console.WriteLine("Deserialization failed", ex.Message);
        }

    }

    private void SetMCQs()
    {
        var questions = new List<MCQ>();
        foreach(var mcq in mcqs)
        {
            //1. set regular properties
            var mCQ = new MCQ()
            {
                Question = mcq.Question,
                QuestionImageUrl = mcq.QuestionImageUrl,
                Answer = mcq.Answer,
                MultipleAnswers = mcq.MultipleAnswers,
                IsAnonymous = mcq.IsAnonymous,
                correctAnswer = mcq.correctAnswer,
                JustificationText = mcq.JustificationText,
                JustificationImageUrl = mcq.JustificationImageUrl,
                Instruction = mcq.Instruction,
                TopicId = mcq.TopicId,
                Position = mcq.Position,
                PastPaperId = PastPaperModel.Id                
            };

            //2. Set options for this question if any
            if (mcq.Options.Any())
            {
                var options = new List<Option>();
                foreach(var opt in mcq.Options)
                {
                    var option = new Option()
                    {
                        mcqOption = opt
                    };
                    options.Add(option);
                }

                //Attach a list of options
                mCQ.Options = options;
            }

            //2. Set Image Options for this question if any
            if (mcq.QuestionImageUrl.Any())
            {
                var options = new List<OptionImage>();
                foreach (var opt in mcq.OptionImageUrl)
                {
                    var option = new OptionImage()
                    {
                        OptionImgUrl = opt
                    };
                    options.Add(option);
                }

                //Attach a list of options
                mCQ.OptionImageUrl = options;
            }

            //3. Map a collection of answers
            if (mcq.Answers.Any())
            {
                var answers = new List<Answer>();

                foreach(var ans in answers)
                {
                    answers.Add(new Answer()
                    {
                        Ans = ans.Ans
                    });
                }

                mCQ.Answers = answers;
            }

            questions.Add(mCQ);
        }

        PastPaperModel.Questions = questions;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogger<MCQForm> Logger { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
