@page "/topic"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Admin.Shared.Models


@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<a href="/topic/create" class="btn btn-primary">Create New Topic</a>


@if (topics == null)
{
    <div class="spinner-grow text-primary"></div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td></td>
                <th>TopicID</th>
                <th>Title</th>
                <th>Topic No.</th>
                <th>Subject</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var topic in topics)
            {
                <tr>
                    <td>
                        <a class="btn btn-info" href="/topic/edit/@topic.Id">Edit Topic</a>
                    </td>
                    <td>@topic.Id</td>
                    <td>@topic.Title</td>
                    <td>@topic.TopicNum</td>
                    <td>@topic.SubjectId</td>
                    <td>
                        <a class="btn btn-info" href="/topic/edit/@topic.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(async () => await DeleteTopic(topic))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Topic[] topics;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            topics = await Http.GetFromJsonAsync<Topic[]>("api/Topics");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteTopic(Topic topic)
    {
        //Ask for user confirmation then delete according
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete: '{topic.Title}'?"))
            return;

        //Delete and Navigate to List of Exams
        try
        {
            await Http.DeleteAsync($"api/Topics/{topic.Id}");

            topics = await Http.GetFromJsonAsync<Topic[]>("api/Topics");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }
}
