@using Admin.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using static System.Net.WebRequestMethods

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="alert alert-secondary mt-4" role="alert">
    <EditForm Model="@QuizAwardModel" OnValidSubmit="HandleValidSubmit">

        <h3> @Title </h3>
        <hr />
        <ValidationSummary />
        <div class="form-group row">
            <label for="id" class="col-sm-2 col-form-label">
                Quiz ID
            </label>
            <div class="col-sm-10">
                <InputNumber id="id" class="form-control" placeholder="quiz id" disabled="@isToBeEdited"
                             @bind-Value="QuizAwardModel.Id" />
                <ValidationMessage For="@(() => QuizAwardModel.Id)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="title" class="col-sm-2 col-form-label">
                UserID
            </label>
            <div class="col-sm-10">
                <InputText id="title" class="form-control" placeholder="user id"
                           @bind-Value="QuizAwardModel.UserId" />
                <ValidationMessage For="@(() => QuizAwardModel.UserId)" />
            </div>
        </div>

        <div class="form-group row">
            <label for="exam-type" class="col-sm-2 col-form-label">
                PastPaper ID
            </label>
            <div class="col-sm-10">
                <InputText id="exam-type" class="form-control" placeholder="pastpaper id" disabled="@isToBeEdited"
                           @bind-Value="QuizAwardModel.PastPaperId" />
                <ValidationMessage For="@(() => QuizAwardModel.PastPaperId)" />
            </div>
        </div>


        <div class="form-group row">
            <label for="isApproved" class="col-sm-2 col-form-label">
                StudentImage URL
            </label>
            <div class="col-sm-10">
                <InputText id="isApproved" class="form-control" placeholder="student image url for price award"
                           @bind-Value="QuizAwardModel.StudentImageUrl" />
                <ValidationMessage For="@(() => QuizAwardModel.StudentImageUrl)" />
            </div>
        </div>

        <div class="form-group row">
            <label for="isApproved" class="col-sm-2 col-form-label">
                StudentImage URL
            </label>
            <div class="col-sm-10">
                <InputTextArea id="isApproved" class="form-control"
                               @bind-Value="QuizAwardModel.Description" />
                <ValidationMessage For="@(() => QuizAwardModel.Description)" />
            </div>
        </div>


        <div class="form-group row">
            <label for="examination-date" class="col-sm-2 col-form-label">
                Examination Date
            </label>
            <div class="col-sm-10">
                <InputDate id="examination-date" class="form-control"
                           @bind-Value="QuizAwardModel.AwardedDate" />
                <ValidationMessage For="@(() => QuizAwardModel.AwardedDate)" />
            </div>
        </div>

        <div class="form-group row">
            <label for="email" class="col-sm-4 col-form-label">
                Change PastPaperID
            </label>
            <div class="col-sm-8">
                <InputSelect @bind-Value="QuizAwardModel.PastPaperId">
                    <option>Select Examination Type</option>
                    @foreach (var p in PastPapers)
                    {
                        <option value="@p.Id">@p.Title</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => QuizAwardModel.PastPaperId)" />
            </div>
        </div>

        <button class="btn btn-primary" type="submit">Submit</button>
    </EditForm>
   
    <button class="btn btn-secondary" @onclick="GetWinnerID" style="float:right">Get First Winner</button>
</div>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool isToBeEdited { get; set; }

    [Parameter]
    public QuizAward QuizAwardModel { get; set; }

    public List<PastPaper> PastPapers { get; set; } = new List<PastPaper>();
    public string PaperTitle { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<QuizAward> OnQuizAwardFormEditSubmit { get; set; }

    bool isDescriptionModified;
    string description = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PastPapers = await Http.GetFromJsonAsync<List<PastPaper>>("api/PastPapersQuizes");


        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async Task HandleValidSubmit()
    {
        //await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete: '{ExaminationEditModel.ExamCategoryId}'?");

        await OnQuizAwardFormEditSubmit.InvokeAsync(QuizAwardModel);
    }

    private async Task GetWinnerID()
    {

        var pastpaperId = QuizAwardModel.PastPaperId;


        var username = string.Empty;

        if (!isDescriptionModified)
        {
            description = QuizAwardModel.Description;
            isDescriptionModified = true;
        }

        if (!string.IsNullOrEmpty(pastpaperId))
        {
            var quizResult = await Http.GetFromJsonAsync<Admin.Shared.Dtos.QuizResultDto>($"api/PastQuizAwards/{pastpaperId}");

            QuizAwardModel.UserId = quizResult.UserId;

            QuizAwardModel.Description = quizResult.Username + ", " + description;
        }
    }
}
