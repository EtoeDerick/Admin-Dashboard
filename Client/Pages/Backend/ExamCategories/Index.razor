@page "/examination/category"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Admin.Shared.Models

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Examination Categories</h3>
<a class="btn btn-primary" href="/examination/category/create">Create New Exam Category</a>

@if(exams == null || exams.Count < 1){
    <div class="spinner-grow"><p style="padding: 15px"> <br/> Loading...</p></div>
}else{
    <table class="table">
        <thead>
            <tr>
                <td></td>
                <th>ID</th>
                <th>Code</th>
                <th>Title</th>
                <th>BgColor</th>
                <th>TextColor</th>
                <th>Description</th>
            </tr>
        </thead>
        @if (exams.Any())
        {
            <tbody>
                @foreach (var exam in exams)
                {
                    <tr>
                        <td>
                            <a class="btn btn-info" href="/examination/category/edit/@exam.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="@(async () => await DeleteExam(exam))">Delete</button>
                        </td>
                        <td>@exam.Id</td>
                        <td>@exam.Code</td>
                        <td>@exam.Title</td>
                        <td>@exam.CategoryBgColor</td>
                        <td>@exam.CategoryTextColor</td>
                        <td>@exam.Description</td>
                    </tr>
                }
            </tbody>
        }
    </table>
}

@code {
    private List<ExamCategory> exams = null;

    protected override async Task OnInitializedAsync()
    {

        try
        {
            exams = new List<ExamCategory>();
            exams = await Http.GetFromJsonAsync<List<ExamCategory>>("api/ExamCategory");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteExam(ExamCategory exam)
    {
        //Ask for user confirmation then delete according
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete: '{exam.Title}'?"))
            return;

        //Delete and Navigate to List of Exams
        try
        {
            await Http.DeleteAsync($"api/ExamCategory/{exam.Id}");

            exams = await Http.GetFromJsonAsync<List<ExamCategory>>("api/ExamCategory");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
